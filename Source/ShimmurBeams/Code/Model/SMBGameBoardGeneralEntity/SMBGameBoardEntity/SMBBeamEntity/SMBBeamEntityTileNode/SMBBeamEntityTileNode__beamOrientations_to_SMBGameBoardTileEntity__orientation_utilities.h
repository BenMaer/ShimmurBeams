//
//  SMBBeamEntityTileNode__beamOrientations_to_SMBGameBoardTileEntity__orientation_utilities.h
//  ShimmurBeams
//
//  Created by Benjamin Maer on 8/8/17.
//  Copyright Â© 2017 Shimmur. All rights reserved.
//

#ifndef SMBBeamEntityTileNode__beamOrientations_to_SMBGameBoardTileEntity__orientation_utilities_h
#define SMBBeamEntityTileNode__beamOrientations_to_SMBGameBoardTileEntity__orientation_utilities_h

#import "SMBBeamEntityTileNode__beamOrientations.h"
#import "SMBGameBoardTileEntity__orientations.h"

#import <ResplendentUtilities/RUConditionalReturn.h>
#import <ResplendentUtilities/NSDictionary+RUReverse.h>





static inline NSDictionary<NSNumber*,NSNumber*>* SMBBeamEntityTileNode__beamOrientation_to_SMBGameBoardTileEntity__orientations_mapping(){
	NSMutableDictionary<NSNumber*,NSNumber*>* const gameBoardTileEntity__orientation_to_beamOrientation_mapping = [NSMutableDictionary<NSNumber*,NSNumber*> dictionary];

	[gameBoardTileEntity__orientation_to_beamOrientation_mapping setObject:@(SMBGameBoardTileEntity__orientation_up)	forKey:@(SMBBeamEntityTileNode__beamOrientation_up)];
	[gameBoardTileEntity__orientation_to_beamOrientation_mapping setObject:@(SMBGameBoardTileEntity__orientation_right)	forKey:@(SMBBeamEntityTileNode__beamOrientation_right)];
	[gameBoardTileEntity__orientation_to_beamOrientation_mapping setObject:@(SMBGameBoardTileEntity__orientation_down)	forKey:@(SMBBeamEntityTileNode__beamOrientation_down)];
	[gameBoardTileEntity__orientation_to_beamOrientation_mapping setObject:@(SMBGameBoardTileEntity__orientation_left)	forKey:@(SMBBeamEntityTileNode__beamOrientation_left)];

	return [NSDictionary<NSNumber*,NSNumber*> dictionaryWithDictionary:gameBoardTileEntity__orientation_to_beamOrientation_mapping];
}

static inline SMBGameBoardTileEntity__orientation SMBGameBoardTileEntity__orientation_for_beamOrientation(SMBBeamEntityTileNode__beamOrientation beamOrientation){
	NSDictionary<NSNumber*,NSNumber*>* const beamOrientation_to_gameBoardTileEntity__orientation_mapping = SMBBeamEntityTileNode__beamOrientation_to_SMBGameBoardTileEntity__orientations_mapping();
	kRUConditionalReturn_ReturnValue(beamOrientation_to_gameBoardTileEntity__orientation_mapping == nil, YES, SMBGameBoardTileEntity__orientation_unknown);

	NSNumber* const gameBoardTileEntity__orientation_number = [beamOrientation_to_gameBoardTileEntity__orientation_mapping objectForKey:@(beamOrientation)];
	kRUConditionalReturn_ReturnValue(gameBoardTileEntity__orientation_number == nil, YES, SMBGameBoardTileEntity__orientation_unknown);

	return gameBoardTileEntity__orientation_number.integerValue;
}

static inline SMBBeamEntityTileNode__beamOrientation SMBBeamEntityTileNode__beamOrientation_for_gameBoardTileEntity__orientation(SMBGameBoardTileEntity__orientation gameBoardTileEntity__orientation){
	NSDictionary<NSNumber*,NSNumber*>* const beamOrientation_to_gameBoardTileEntity__orientation_mapping = SMBBeamEntityTileNode__beamOrientation_to_SMBGameBoardTileEntity__orientations_mapping();
	kRUConditionalReturn_ReturnValue(beamOrientation_to_gameBoardTileEntity__orientation_mapping == nil, YES, SMBBeamEntityTileNode__beamOrientation_none);

	NSDictionary<NSNumber*,NSNumber*>* const gameBoardTileEntity__orientation_to_beamOrientation_mapping = [beamOrientation_to_gameBoardTileEntity__orientation_mapping ru_reverseDictionary];
	kRUConditionalReturn_ReturnValue(gameBoardTileEntity__orientation_to_beamOrientation_mapping == nil, YES, SMBBeamEntityTileNode__beamOrientation_none);

	NSNumber* const beamOrientation_number = [gameBoardTileEntity__orientation_to_beamOrientation_mapping objectForKey:@(gameBoardTileEntity__orientation)];
	kRUConditionalReturn_ReturnValue(beamOrientation_number == nil, YES, SMBBeamEntityTileNode__beamOrientation_none);

	SMBBeamEntityTileNode__beamOrientation const beamOrientation = beamOrientation_number.integerValue;
	kRUConditionalReturn_ReturnValue(SMBBeamEntityTileNode__beamOrientation__isInRange(beamOrientation) == false, YES, SMBBeamEntityTileNode__beamOrientation_none);

	return beamOrientation;
}

#endif /* SMBBeamEntityTileNode__beamOrientations_to_SMBGameBoardTileEntity__orientation_utilities_h */
